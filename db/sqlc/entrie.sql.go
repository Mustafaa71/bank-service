// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: entrie.sql

package db

import (
	"context"
)

const createEntrie = `-- name: CreateEntrie :one
INSERT INTO entrie (
  accoount_id,
  amount 
) VALUES (
  $1, $2
) RETURNING id, accoount_id, amount, created_at
`

type CreateEntrieParams struct {
	AccoountID int64 `json:"accoount_id"`
	Amount     int64 `json:"amount"`
}

func (q *Queries) CreateEntrie(ctx context.Context, arg CreateEntrieParams) (Entrie, error) {
	row := q.db.QueryRowContext(ctx, createEntrie, arg.AccoountID, arg.Amount)
	var i Entrie
	err := row.Scan(
		&i.ID,
		&i.AccoountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getEntrie = `-- name: GetEntrie :one
SELECT id, accoount_id, amount, created_at FROM entrie
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntrie(ctx context.Context, id int64) (Entrie, error) {
	row := q.db.QueryRowContext(ctx, getEntrie, id)
	var i Entrie
	err := row.Scan(
		&i.ID,
		&i.AccoountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntrie = `-- name: ListEntrie :many
SELECT id, accoount_id, amount, created_at FROM entrie
WHERE accoount_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListEntrieParams struct {
	AccoountID int64 `json:"accoount_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListEntrie(ctx context.Context, arg ListEntrieParams) ([]Entrie, error) {
	rows, err := q.db.QueryContext(ctx, listEntrie, arg.AccoountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entrie
	for rows.Next() {
		var i Entrie
		if err := rows.Scan(
			&i.ID,
			&i.AccoountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
